package com.straw.lession.physical.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.straw.lession.physical.vo.db.Institute;

import com.straw.lession.physical.vo.db.TeacherInstitute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER_INSTITUTE".
*/
public class TeacherInstituteDao extends AbstractDao<TeacherInstitute, Long> {

    public static final String TABLENAME = "TEACHER_INSTITUTE";

    /**
     * Properties of entity TeacherInstitute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InstituteIdR = new Property(1, Long.class, "instituteIdR", false, "INSTITUTE_ID_R");
        public final static Property TeacherIdR = new Property(2, Long.class, "teacherIdR", false, "TEACHER_ID_R");
    };

    private DaoSession daoSession;

    private Query<TeacherInstitute> teacher_TeacherInstitutesQuery;

    public TeacherInstituteDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherInstituteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER_INSTITUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INSTITUTE_ID_R\" INTEGER," + // 1: instituteIdR
                "\"TEACHER_ID_R\" INTEGER);"); // 2: teacherIdR
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER_INSTITUTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeacherInstitute entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long instituteIdR = entity.getInstituteIdR();
        if (instituteIdR != null) {
            stmt.bindLong(2, instituteIdR);
        }
 
        Long teacherIdR = entity.getTeacherIdR();
        if (teacherIdR != null) {
            stmt.bindLong(3, teacherIdR);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeacherInstitute entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long instituteIdR = entity.getInstituteIdR();
        if (instituteIdR != null) {
            stmt.bindLong(2, instituteIdR);
        }
 
        Long teacherIdR = entity.getTeacherIdR();
        if (teacherIdR != null) {
            stmt.bindLong(3, teacherIdR);
        }
    }

    @Override
    protected final void attachEntity(TeacherInstitute entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeacherInstitute readEntity(Cursor cursor, int offset) {
        TeacherInstitute entity = new TeacherInstitute( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // instituteIdR
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // teacherIdR
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeacherInstitute entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInstituteIdR(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTeacherIdR(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeacherInstitute entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeacherInstitute entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teacherInstitutes" to-many relationship of Teacher. */
    public List<TeacherInstitute> _queryTeacher_TeacherInstitutes(Long teacherIdR) {
        synchronized (this) {
            if (teacher_TeacherInstitutesQuery == null) {
                QueryBuilder<TeacherInstitute> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TeacherIdR.eq(null));
                teacher_TeacherInstitutesQuery = queryBuilder.build();
            }
        }
        Query<TeacherInstitute> query = teacher_TeacherInstitutesQuery.forCurrentThread();
        query.setParameter(0, teacherIdR);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getInstituteDao().getAllColumns());
            builder.append(" FROM TEACHER_INSTITUTE T");
            builder.append(" LEFT JOIN INSTITUTE T0 ON T.\"INSTITUTE_ID_R\"=T0.\"INSTITUTE_ID_R\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TeacherInstitute loadCurrentDeep(Cursor cursor, boolean lock) {
        TeacherInstitute entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Institute institute = loadCurrentOther(daoSession.getInstituteDao(), cursor, offset);
        entity.setInstitute(institute);

        return entity;    
    }

    public TeacherInstitute loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TeacherInstitute> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TeacherInstitute> list = new ArrayList<TeacherInstitute>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TeacherInstitute> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TeacherInstitute> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
