package com.straw.lession.physical.vo.db;

import org.greenrobot.greendao.annotation.*;

import com.straw.lession.physical.db.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.straw.lession.physical.db.CourseDao;
import com.straw.lession.physical.db.CourseDefineDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COURSE".
 */
@Entity(active = true)
public class Course {

    @Id
    private Long id;
    private Long loginId;
    private Integer useOnce;
    private Long courseDefineId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CourseDao myDao;

    @ToOne(joinProperty = "courseDefineId")
    private CourseDefine courseDefine;

    @Generated
    private transient Long courseDefine__resolvedKey;

    @Generated
    public Course() {
    }

    public Course(Long id) {
        this.id = id;
    }

    @Generated
    public Course(Long id, Long loginId, Integer useOnce, Long courseDefineId) {
        this.id = id;
        this.loginId = loginId;
        this.useOnce = useOnce;
        this.courseDefineId = courseDefineId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCourseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getLoginId() {
        return loginId;
    }

    public void setLoginId(Long loginId) {
        this.loginId = loginId;
    }

    public Integer getUseOnce() {
        return useOnce;
    }

    public void setUseOnce(Integer useOnce) {
        this.useOnce = useOnce;
    }

    public Long getCourseDefineId() {
        return courseDefineId;
    }

    public void setCourseDefineId(Long courseDefineId) {
        this.courseDefineId = courseDefineId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public CourseDefine getCourseDefine() {
        Long __key = this.courseDefineId;
        if (courseDefine__resolvedKey == null || !courseDefine__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CourseDefineDao targetDao = daoSession.getCourseDefineDao();
            CourseDefine courseDefineNew = targetDao.load(__key);
            synchronized (this) {
                courseDefine = courseDefineNew;
            	courseDefine__resolvedKey = __key;
            }
        }
        return courseDefine;
    }

    @Generated
    public void setCourseDefine(CourseDefine courseDefine) {
        synchronized (this) {
            this.courseDefine = courseDefine;
            courseDefineId = courseDefine == null ? null : courseDefine.getId();
            courseDefine__resolvedKey = courseDefineId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
