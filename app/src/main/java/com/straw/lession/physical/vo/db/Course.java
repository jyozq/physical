package com.straw.lession.physical.vo.db;

import org.greenrobot.greendao.annotation.*;

import com.straw.lession.physical.db.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.straw.lession.physical.db.CourseDao;
import com.straw.lession.physical.db.CourseDefineDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COURSE".
 */
@Entity(active = true)
public class Course {

    @Id
    private Long id;
    private java.util.Date date;
    private Integer useOnce;
    private Integer weekday;
    private Integer status;
    private Long instituteIdR;
    private Long teacherIdR;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private java.util.Date courseIdR;
    private String syncMsg;
    private Boolean isUploaded;
    private Long courseDefineIdR;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CourseDao myDao;

    @ToOne(joinProperty = "courseDefineIdR")
    private CourseDefine courseDefine;

    @Generated
    private transient Long courseDefine__resolvedKey;

    @Generated
    public Course() {
    }

    public Course(Long id) {
        this.id = id;
    }

    @Generated
    public Course(Long id, java.util.Date date, Integer useOnce, Integer weekday, Integer status, Long instituteIdR, Long teacherIdR, java.util.Date startTime, java.util.Date endTime, java.util.Date courseIdR, String syncMsg, Boolean isUploaded, Long courseDefineIdR) {
        this.id = id;
        this.date = date;
        this.useOnce = useOnce;
        this.weekday = weekday;
        this.status = status;
        this.instituteIdR = instituteIdR;
        this.teacherIdR = teacherIdR;
        this.startTime = startTime;
        this.endTime = endTime;
        this.courseIdR = courseIdR;
        this.syncMsg = syncMsg;
        this.isUploaded = isUploaded;
        this.courseDefineIdR = courseDefineIdR;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCourseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Integer getUseOnce() {
        return useOnce;
    }

    public void setUseOnce(Integer useOnce) {
        this.useOnce = useOnce;
    }

    public Integer getWeekday() {
        return weekday;
    }

    public void setWeekday(Integer weekday) {
        this.weekday = weekday;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Long getInstituteIdR() {
        return instituteIdR;
    }

    public void setInstituteIdR(Long instituteIdR) {
        this.instituteIdR = instituteIdR;
    }

    public Long getTeacherIdR() {
        return teacherIdR;
    }

    public void setTeacherIdR(Long teacherIdR) {
        this.teacherIdR = teacherIdR;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public java.util.Date getEndTime() {
        return endTime;
    }

    public void setEndTime(java.util.Date endTime) {
        this.endTime = endTime;
    }

    public java.util.Date getCourseIdR() {
        return courseIdR;
    }

    public void setCourseIdR(java.util.Date courseIdR) {
        this.courseIdR = courseIdR;
    }

    public String getSyncMsg() {
        return syncMsg;
    }

    public void setSyncMsg(String syncMsg) {
        this.syncMsg = syncMsg;
    }

    public Boolean getIsUploaded() {
        return isUploaded;
    }

    public void setIsUploaded(Boolean isUploaded) {
        this.isUploaded = isUploaded;
    }

    public Long getCourseDefineIdR() {
        return courseDefineIdR;
    }

    public void setCourseDefineIdR(Long courseDefineIdR) {
        this.courseDefineIdR = courseDefineIdR;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public CourseDefine getCourseDefine() {
        Long __key = this.courseDefineIdR;
        if (courseDefine__resolvedKey == null || !courseDefine__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CourseDefineDao targetDao = daoSession.getCourseDefineDao();
            CourseDefine courseDefineNew = targetDao.load(__key);
            synchronized (this) {
                courseDefine = courseDefineNew;
            	courseDefine__resolvedKey = __key;
            }
        }
        return courseDefine;
    }

    @Generated
    public void setCourseDefine(CourseDefine courseDefine) {
        synchronized (this) {
            this.courseDefine = courseDefine;
            courseDefineIdR = courseDefine == null ? null : courseDefine.getCourseDefineIdR();
            courseDefine__resolvedKey = courseDefineIdR;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
