package com.straw.lession.physical.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.straw.lession.physical.vo.db.Institute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSTITUTE".
*/
public class InstituteDao extends AbstractDao<Institute, Long> {

    public static final String TABLENAME = "INSTITUTE";

    /**
     * Properties of entity Institute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Code = new Property(0, String.class, "code", false, "CODE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property InstituteIdR = new Property(2, Long.class, "instituteIdR", true, "INSTITUTE_ID_R");
        public final static Property IsDel = new Property(3, Integer.class, "isDel", false, "IS_DEL");
    };

    private DaoSession daoSession;


    public InstituteDao(DaoConfig config) {
        super(config);
    }
    
    public InstituteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSTITUTE\" (" + //
                "\"CODE\" TEXT," + // 0: code
                "\"NAME\" TEXT," + // 1: name
                "\"INSTITUTE_ID_R\" INTEGER PRIMARY KEY ," + // 2: instituteIdR
                "\"IS_DEL\" INTEGER);"); // 3: isDel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSTITUTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Institute entity) {
        stmt.clearBindings();
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(1, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long instituteIdR = entity.getInstituteIdR();
        if (instituteIdR != null) {
            stmt.bindLong(3, instituteIdR);
        }
 
        Integer isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(4, isDel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Institute entity) {
        stmt.clearBindings();
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(1, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long instituteIdR = entity.getInstituteIdR();
        if (instituteIdR != null) {
            stmt.bindLong(3, instituteIdR);
        }
 
        Integer isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(4, isDel);
        }
    }

    @Override
    protected final void attachEntity(Institute entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    @Override
    public Institute readEntity(Cursor cursor, int offset) {
        Institute entity = new Institute( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // code
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // instituteIdR
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // isDel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Institute entity, int offset) {
        entity.setCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInstituteIdR(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsDel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Institute entity, long rowId) {
        entity.setInstituteIdR(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Institute entity) {
        if(entity != null) {
            return entity.getInstituteIdR();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
