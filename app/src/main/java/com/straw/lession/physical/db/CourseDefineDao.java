package com.straw.lession.physical.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.straw.lession.physical.vo.db.CourseDefine;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_DEFINE".
*/
public class CourseDefineDao extends AbstractDao<CourseDefine, Long> {

    public static final String TABLENAME = "COURSE_DEFINE";

    /**
     * Properties of entity CourseDefine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property InstituteId = new Property(4, Long.class, "instituteId", false, "INSTITUTE_ID");
        public final static Property ClassId = new Property(5, Long.class, "classId", false, "CLASS_ID");
        public final static Property TeacherId = new Property(6, Long.class, "teacherId", false, "TEACHER_ID");
        public final static Property WeekDay = new Property(7, Integer.class, "weekDay", false, "WEEK_DAY");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
        public final static Property Seq = new Property(9, Integer.class, "seq", false, "SEQ");
        public final static Property Location = new Property(10, String.class, "location", false, "LOCATION");
        public final static Property StartTime = new Property(11, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(12, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property UseOnce = new Property(13, Integer.class, "useOnce", false, "USE_ONCE");
    };


    public CourseDefineDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDefineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_DEFINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" TEXT," + // 3: type
                "\"INSTITUTE_ID\" INTEGER," + // 4: instituteId
                "\"CLASS_ID\" INTEGER," + // 5: classId
                "\"TEACHER_ID\" INTEGER," + // 6: teacherId
                "\"WEEK_DAY\" INTEGER," + // 7: weekDay
                "\"DATE\" INTEGER," + // 8: date
                "\"SEQ\" INTEGER," + // 9: seq
                "\"LOCATION\" TEXT," + // 10: location
                "\"START_TIME\" INTEGER," + // 11: startTime
                "\"END_TIME\" INTEGER," + // 12: endTime
                "\"USE_ONCE\" INTEGER);"); // 13: useOnce
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_DEFINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseDefine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        Long instituteId = entity.getInstituteId();
        if (instituteId != null) {
            stmt.bindLong(5, instituteId);
        }
 
        Long classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(6, classId);
        }
 
        Long teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindLong(7, teacherId);
        }
 
        Integer weekDay = entity.getWeekDay();
        if (weekDay != null) {
            stmt.bindLong(8, weekDay);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
 
        Integer seq = entity.getSeq();
        if (seq != null) {
            stmt.bindLong(10, seq);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(11, location);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(12, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(13, endTime.getTime());
        }
 
        Integer useOnce = entity.getUseOnce();
        if (useOnce != null) {
            stmt.bindLong(14, useOnce);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseDefine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        Long instituteId = entity.getInstituteId();
        if (instituteId != null) {
            stmt.bindLong(5, instituteId);
        }
 
        Long classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(6, classId);
        }
 
        Long teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindLong(7, teacherId);
        }
 
        Integer weekDay = entity.getWeekDay();
        if (weekDay != null) {
            stmt.bindLong(8, weekDay);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
 
        Integer seq = entity.getSeq();
        if (seq != null) {
            stmt.bindLong(10, seq);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(11, location);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(12, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(13, endTime.getTime());
        }
 
        Integer useOnce = entity.getUseOnce();
        if (useOnce != null) {
            stmt.bindLong(14, useOnce);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CourseDefine readEntity(Cursor cursor, int offset) {
        CourseDefine entity = new CourseDefine( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // instituteId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // classId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // teacherId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // weekDay
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // date
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // seq
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // location
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // startTime
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // endTime
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // useOnce
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseDefine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInstituteId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setClassId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTeacherId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setWeekDay(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setSeq(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLocation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStartTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setEndTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUseOnce(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseDefine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseDefine entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
