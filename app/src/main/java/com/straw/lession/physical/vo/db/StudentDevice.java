package com.straw.lession.physical.vo.db;

import org.greenrobot.greendao.annotation.*;

import com.straw.lession.physical.db.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.straw.lession.physical.db.CourseDao;
import com.straw.lession.physical.db.StudentDao;
import com.straw.lession.physical.db.StudentDeviceDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "STUDENT_DEVICE".
 */
@Entity(active = true)
public class StudentDevice {

    @Id
    private Long id;
    private String deviceNo;
    private java.util.Date bindTime;
    private Long teacherIdR;
    private Boolean isUploaded;
    private Long courseDefineIdR;
    private Long courseId;
    private Long studentIdR;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient StudentDeviceDao myDao;

    @ToOne(joinProperty = "courseId")
    private Course course;

    @Generated
    private transient Long course__resolvedKey;

    @ToOne(joinProperty = "studentIdR")
    private Student student;

    @Generated
    private transient Long student__resolvedKey;

    @Generated
    public StudentDevice() {
    }

    public StudentDevice(Long id) {
        this.id = id;
    }

    @Generated
    public StudentDevice(Long id, String deviceNo, java.util.Date bindTime, Long teacherIdR, Boolean isUploaded, Long courseDefineIdR, Long courseId, Long studentIdR) {
        this.id = id;
        this.deviceNo = deviceNo;
        this.bindTime = bindTime;
        this.teacherIdR = teacherIdR;
        this.isUploaded = isUploaded;
        this.courseDefineIdR = courseDefineIdR;
        this.courseId = courseId;
        this.studentIdR = studentIdR;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDeviceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDeviceNo() {
        return deviceNo;
    }

    public void setDeviceNo(String deviceNo) {
        this.deviceNo = deviceNo;
    }

    public java.util.Date getBindTime() {
        return bindTime;
    }

    public void setBindTime(java.util.Date bindTime) {
        this.bindTime = bindTime;
    }

    public Long getTeacherIdR() {
        return teacherIdR;
    }

    public void setTeacherIdR(Long teacherIdR) {
        this.teacherIdR = teacherIdR;
    }

    public Boolean getIsUploaded() {
        return isUploaded;
    }

    public void setIsUploaded(Boolean isUploaded) {
        this.isUploaded = isUploaded;
    }

    public Long getCourseDefineIdR() {
        return courseDefineIdR;
    }

    public void setCourseDefineIdR(Long courseDefineIdR) {
        this.courseDefineIdR = courseDefineIdR;
    }

    public Long getCourseId() {
        return courseId;
    }

    public void setCourseId(Long courseId) {
        this.courseId = courseId;
    }

    public Long getStudentIdR() {
        return studentIdR;
    }

    public void setStudentIdR(Long studentIdR) {
        this.studentIdR = studentIdR;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Course getCourse() {
        Long __key = this.courseId;
        if (course__resolvedKey == null || !course__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CourseDao targetDao = daoSession.getCourseDao();
            Course courseNew = targetDao.load(__key);
            synchronized (this) {
                course = courseNew;
            	course__resolvedKey = __key;
            }
        }
        return course;
    }

    @Generated
    public void setCourse(Course course) {
        synchronized (this) {
            this.course = course;
            courseId = course == null ? null : course.getId();
            course__resolvedKey = courseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Student getStudent() {
        Long __key = this.studentIdR;
        if (student__resolvedKey == null || !student__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentDao targetDao = daoSession.getStudentDao();
            Student studentNew = targetDao.load(__key);
            synchronized (this) {
                student = studentNew;
            	student__resolvedKey = __key;
            }
        }
        return student;
    }

    @Generated
    public void setStudent(Student student) {
        synchronized (this) {
            this.student = student;
            studentIdR = student == null ? null : student.getStudentIdR();
            student__resolvedKey = studentIdR;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
