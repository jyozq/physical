package com.straw.lession.physical.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.straw.lession.physical.vo.db.CourseDefine;

import com.straw.lession.physical.vo.db.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property UseOnce = new Property(2, Integer.class, "useOnce", false, "USE_ONCE");
        public final static Property Weekday = new Property(3, Integer.class, "weekday", false, "WEEKDAY");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property InstituteIdR = new Property(5, Long.class, "instituteIdR", false, "INSTITUTE_ID_R");
        public final static Property TeacherIdR = new Property(6, Long.class, "teacherIdR", false, "TEACHER_ID_R");
        public final static Property StartTime = new Property(7, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property IsUploaded = new Property(9, Boolean.class, "isUploaded", false, "IS_UPLOADED");
        public final static Property CourseDefineIdR = new Property(10, Long.class, "courseDefineIdR", false, "COURSE_DEFINE_ID_R");
    };

    private DaoSession daoSession;


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"USE_ONCE\" INTEGER," + // 2: useOnce
                "\"WEEKDAY\" INTEGER," + // 3: weekday
                "\"STATUS\" INTEGER," + // 4: status
                "\"INSTITUTE_ID_R\" INTEGER," + // 5: instituteIdR
                "\"TEACHER_ID_R\" INTEGER," + // 6: teacherIdR
                "\"START_TIME\" INTEGER," + // 7: startTime
                "\"END_TIME\" INTEGER," + // 8: endTime
                "\"IS_UPLOADED\" INTEGER," + // 9: isUploaded
                "\"COURSE_DEFINE_ID_R\" INTEGER);"); // 10: courseDefineIdR
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Integer useOnce = entity.getUseOnce();
        if (useOnce != null) {
            stmt.bindLong(3, useOnce);
        }
 
        Integer weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindLong(4, weekday);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Long instituteIdR = entity.getInstituteIdR();
        if (instituteIdR != null) {
            stmt.bindLong(6, instituteIdR);
        }
 
        Long teacherIdR = entity.getTeacherIdR();
        if (teacherIdR != null) {
            stmt.bindLong(7, teacherIdR);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(8, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(9, endTime.getTime());
        }
 
        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(10, isUploaded ? 1L: 0L);
        }
 
        Long courseDefineIdR = entity.getCourseDefineIdR();
        if (courseDefineIdR != null) {
            stmt.bindLong(11, courseDefineIdR);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Integer useOnce = entity.getUseOnce();
        if (useOnce != null) {
            stmt.bindLong(3, useOnce);
        }
 
        Integer weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindLong(4, weekday);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Long instituteIdR = entity.getInstituteIdR();
        if (instituteIdR != null) {
            stmt.bindLong(6, instituteIdR);
        }
 
        Long teacherIdR = entity.getTeacherIdR();
        if (teacherIdR != null) {
            stmt.bindLong(7, teacherIdR);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(8, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(9, endTime.getTime());
        }
 
        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(10, isUploaded ? 1L: 0L);
        }
 
        Long courseDefineIdR = entity.getCourseDefineIdR();
        if (courseDefineIdR != null) {
            stmt.bindLong(11, courseDefineIdR);
        }
    }

    @Override
    protected final void attachEntity(Course entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // useOnce
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // weekday
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // instituteIdR
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // teacherIdR
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // startTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // endTime
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isUploaded
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // courseDefineIdR
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUseOnce(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWeekday(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setInstituteIdR(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTeacherIdR(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setIsUploaded(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setCourseDefineIdR(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCourseDefineDao().getAllColumns());
            builder.append(" FROM COURSE T");
            builder.append(" LEFT JOIN COURSE_DEFINE T0 ON T.\"COURSE_DEFINE_ID_R\"=T0.\"COURSE_DEFINE_ID_R\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Course loadCurrentDeep(Cursor cursor, boolean lock) {
        Course entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CourseDefine courseDefine = loadCurrentOther(daoSession.getCourseDefineDao(), cursor, offset);
        entity.setCourseDefine(courseDefine);

        return entity;    
    }

    public Course loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Course> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Course> list = new ArrayList<Course>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Course> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Course> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
