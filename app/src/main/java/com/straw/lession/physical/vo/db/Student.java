package com.straw.lession.physical.vo.db;

import org.greenrobot.greendao.annotation.*;

import com.straw.lession.physical.db.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.straw.lession.physical.db.ClassInfoDao;
import com.straw.lession.physical.db.StudentDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "STUDENT".
 */
@Entity(active = true)
public class Student {
    private String code;
    private String name;
    private Integer gender;
    private java.util.Date birthday;

    @Id
    private Long studentIdR;
    private Integer isDel;
    private Long classIdR;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient StudentDao myDao;

    @ToOne(joinProperty = "classIdR")
    private ClassInfo classInfo;

    @Generated
    private transient Long classInfo__resolvedKey;

    @Generated
    public Student() {
    }

    public Student(Long studentIdR) {
        this.studentIdR = studentIdR;
    }

    @Generated
    public Student(String code, String name, Integer gender, java.util.Date birthday, Long studentIdR, Integer isDel, Long classIdR) {
        this.code = code;
        this.name = name;
        this.gender = gender;
        this.birthday = birthday;
        this.studentIdR = studentIdR;
        this.isDel = isDel;
        this.classIdR = classIdR;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDao() : null;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getGender() {
        return gender;
    }

    public void setGender(Integer gender) {
        this.gender = gender;
    }

    public java.util.Date getBirthday() {
        return birthday;
    }

    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }

    public Long getStudentIdR() {
        return studentIdR;
    }

    public void setStudentIdR(Long studentIdR) {
        this.studentIdR = studentIdR;
    }

    public Integer getIsDel() {
        return isDel;
    }

    public void setIsDel(Integer isDel) {
        this.isDel = isDel;
    }

    public Long getClassIdR() {
        return classIdR;
    }

    public void setClassIdR(Long classIdR) {
        this.classIdR = classIdR;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ClassInfo getClassInfo() {
        Long __key = this.classIdR;
        if (classInfo__resolvedKey == null || !classInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassInfoDao targetDao = daoSession.getClassInfoDao();
            ClassInfo classInfoNew = targetDao.load(__key);
            synchronized (this) {
                classInfo = classInfoNew;
            	classInfo__resolvedKey = __key;
            }
        }
        return classInfo;
    }

    @Generated
    public void setClassInfo(ClassInfo classInfo) {
        synchronized (this) {
            this.classInfo = classInfo;
            classIdR = classInfo == null ? null : classInfo.getClassIdR();
            classInfo__resolvedKey = classIdR;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
