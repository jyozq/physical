package com.straw.lession.physical.vo.db;

import org.greenrobot.greendao.annotation.*;

import com.straw.lession.physical.db.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.straw.lession.physical.db.ClassInfoDao;
import com.straw.lession.physical.db.CourseDefineDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COURSE_DEFINE".
 */
@Entity(active = true)
public class CourseDefine {
    private String code;
    private String name;
    private String type;
    private Integer weekDay;
    private java.util.Date date;
    private Integer seq;
    private String location;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private Integer useOnce;
    private Long instituteIdR;
    private Long teacherIdR;

    @Id
    private Long courseDefineIdR;
    private Integer isDel;
    private Long classIdR;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CourseDefineDao myDao;

    @ToOne(joinProperty = "classIdR")
    private ClassInfo classInfo;

    @Generated
    private transient Long classInfo__resolvedKey;

    @Generated
    public CourseDefine() {
    }

    public CourseDefine(Long courseDefineIdR) {
        this.courseDefineIdR = courseDefineIdR;
    }

    @Generated
    public CourseDefine(String code, String name, String type, Integer weekDay, java.util.Date date, Integer seq, String location, java.util.Date startTime, java.util.Date endTime, Integer useOnce, Long instituteIdR, Long teacherIdR, Long courseDefineIdR, Integer isDel, Long classIdR) {
        this.code = code;
        this.name = name;
        this.type = type;
        this.weekDay = weekDay;
        this.date = date;
        this.seq = seq;
        this.location = location;
        this.startTime = startTime;
        this.endTime = endTime;
        this.useOnce = useOnce;
        this.instituteIdR = instituteIdR;
        this.teacherIdR = teacherIdR;
        this.courseDefineIdR = courseDefineIdR;
        this.isDel = isDel;
        this.classIdR = classIdR;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCourseDefineDao() : null;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getWeekDay() {
        return weekDay;
    }

    public void setWeekDay(Integer weekDay) {
        this.weekDay = weekDay;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Integer getSeq() {
        return seq;
    }

    public void setSeq(Integer seq) {
        this.seq = seq;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public java.util.Date getEndTime() {
        return endTime;
    }

    public void setEndTime(java.util.Date endTime) {
        this.endTime = endTime;
    }

    public Integer getUseOnce() {
        return useOnce;
    }

    public void setUseOnce(Integer useOnce) {
        this.useOnce = useOnce;
    }

    public Long getInstituteIdR() {
        return instituteIdR;
    }

    public void setInstituteIdR(Long instituteIdR) {
        this.instituteIdR = instituteIdR;
    }

    public Long getTeacherIdR() {
        return teacherIdR;
    }

    public void setTeacherIdR(Long teacherIdR) {
        this.teacherIdR = teacherIdR;
    }

    public Long getCourseDefineIdR() {
        return courseDefineIdR;
    }

    public void setCourseDefineIdR(Long courseDefineIdR) {
        this.courseDefineIdR = courseDefineIdR;
    }

    public Integer getIsDel() {
        return isDel;
    }

    public void setIsDel(Integer isDel) {
        this.isDel = isDel;
    }

    public Long getClassIdR() {
        return classIdR;
    }

    public void setClassIdR(Long classIdR) {
        this.classIdR = classIdR;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ClassInfo getClassInfo() {
        Long __key = this.classIdR;
        if (classInfo__resolvedKey == null || !classInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassInfoDao targetDao = daoSession.getClassInfoDao();
            ClassInfo classInfoNew = targetDao.load(__key);
            synchronized (this) {
                classInfo = classInfoNew;
            	classInfo__resolvedKey = __key;
            }
        }
        return classInfo;
    }

    @Generated
    public void setClassInfo(ClassInfo classInfo) {
        synchronized (this) {
            this.classInfo = classInfo;
            classIdR = classInfo == null ? null : classInfo.getClassIdR();
            classInfo__resolvedKey = classIdR;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
